<?xml version="1.0" encoding="UTF-8"?>


<!--


 Tests that include the usage of the mclient for transport calls


-->
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:mulemock="http://www.mulesoft.org/schema/mule/mock"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:mclient="http://www.mulesoft.org/schema/mule/mclient"
      xmlns:mtest="http://www.mulesoft.org/schema/mule/mtest"
      xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
        http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/1.0/mule-mock.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/1.0/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/mclient http://www.mulesoft.org/schema/mule/mclient/1.0/mule-mclient.xsd">

    <spring:beans>
        <spring:import resource="mule-config.xml"/>
        <spring:import resource="common-definitions.xml" />
    </spring:beans>


    <munit:config>
        <munit:exclude-inbound-mocking>
            <munit:flow-name>updateSalesforceTemplate</munit:flow-name>
            <munit:flow-name>campaignInfoFlow</munit:flow-name>
        </munit:exclude-inbound-mocking>
    </munit:config>


    <mclient:config/>
    <mulemock:config of="Salesforce" name="salesforceMock"/>

    <munit:before-test name="before.each.test"
         description="Reseting mocks...">
        <mulemock:reset config-ref="salesforceMock"/>
    </munit:before-test>

    <munit:test name="testThatSalesforceUpsertIsCalledCorrectly"
          description="
        Salesforce must be called with a correct query.
        We need to validate that Salesforce is called querying the correct objects.">

        <mulemock:expect config-ref="salesforceMock" when="upsert" mustReturn-ref="nonEmptyList"/>

        <mclient:call path="http://localhost:10443/updateSalesforceTemplate" payload-ref="upsertHttpParameters">
            <mclient:parameters ref="httpParameteres"/>
        </mclient:call>


        <mulemock:verify-call config-ref="salesforceMock" messageProcessor="upsert" >
            <mulemock:parameters>
                <mulemock:parameter key="externalIdFieldName" value-ref="externalIdFieldName"/>
                <mulemock:parameter key="type" value-ref="upsertType"/>
                <mulemock:parameter key="objects" value-ref="upsertExpectedObjects"/>
            </mulemock:parameters>
        </mulemock:verify-call>

    </munit:test>


    <munit:test name="testThatSalesforceIsCorrectlyCalled"

          description="
        Salesforce must be called with a correct query.
        We need to validate that Salesforce is called querying the correct objects.">

        <mulemock:expect config-ref="salesforceMock" when="query" mustReturn-ref="nonEmptyList">
            <mulemock:parameters>
                <mulemock:parameter key="query" value-ref="salesforceQuery"/>
            </mulemock:parameters>
        </mulemock:expect>


        <mclient:call path="http://localhost:10443/campaignInfo">    <!-- The client will return a http response, we -->
            <mclient:response-processing>                            <!-- need to do some post processing to do the  -->
                <object-to-string-transformer/>                      <!-- assertion -->
            </mclient:response-processing>
        </mclient:call>

        <munit:assert-not-null/>
        <munit:assert-that payloadIs-ref='#[string:["value 1","value 2"]]'/>
    </munit:test>


</mule>
