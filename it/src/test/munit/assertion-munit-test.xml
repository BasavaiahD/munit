<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/1.0/mule-munit.xsd ">


    <spring:beans>
        <spring:import resource="mule-config.xml"/>
        <spring:import resource="common-definitions.xml"/>
    </spring:beans>


    <munit:config/>

    <munit:test name="testingEchoFlow"
                description="
        We want to test that the flow always returns the same payload as we had before calling it.">


        <munit:set payload-ref="#[string: Hello world!]"/>

        <flow-ref name="echoFlow"/>

        <munit:assert-not-null/>
        <munit:assert-that payloadIs-ref="#[string: Hello world!]"/>
    </munit:test>


    <munit:test name="testingEchoWithANullPayload"
                description="
        Echo returns always the same as we have before it, so we need to get a Null Payload after it.">

        <munit:set-null-payload/>

        <flow-ref name="echoFlow"/>

        <munit:assert-null/>
    </munit:test>


    <munit:test name="testThatTwoThingsAreEqual"
                description="
        Testing that two things are equal">

        <munit:assert-on-equals expected-ref="#[string: Hello world!]" value-ref="#[string: Hello world!]"/>
    </munit:test>


    <munit:test name="testThatTwoThingsAreNotTheSame"
                description="
        Testing that two things are not equal">

        <munit:assert-not-same expected-ref="#[string: Hello world!]" value-ref="#[string: Hello world2!]"/>
    </munit:test>


    <munit:test name="testThatSomethingIsFalse"
                description="
        Testing that something is false">

        <munit:assert-false condition="#[1==2]"/>
    </munit:test>

    <munit:test name="testThatSomethingIsTrue"
                description="
        Testing that something is true">

        <munit:assert-false condition="#[1==1]"/>
    </munit:test>

    <munit:test name="testThatATestIsIgnored"
                description="
        Testing that a test is ignored" ignore="true">

        <munit:fail/>
    </munit:test>

    <munit:test name="testExceptions" description="Test Exceptions" expected="org.mule.api.transformer.TransformerMessagingException">
        <flow-ref name="exceptionFlow"/>
    </munit:test>
</mule>
