<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:mock="http://www.mulesoft.org/schema/mule/mock"
      xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/3.3/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/3.3/mule-mock.xsd">


    <spring:beans>
        <spring:import resource="mule-config.xml"/>
        <spring:import resource="common-definitions.xml"/>
    </spring:beans>

    <munit:config/>
    <mock:config/>

     <munit:test name="testMockMp" description="
     We are testing here that the Message processor can be mocked with an expected value to return.">


        <mock:expect thatMessageProcessor="echo-component" toReturn-ref="#[string:expectedPayload]" >
            <!--<mock:expects>-->
                <!--<mock:expect valueOfAttribute="" condition="is('epepepe')"/>-->
                <!--<mock:expect valueOfElement="" condition="containsAny('epepepe')"/>-->
            <!--</mock:parameters>-->
         </mock:expect>

        <munit:set payload-ref="#[string:anotherString]"/>

        <flow-ref name="echoFlow"/>

        <munit:assert-that payloadIs-ref="#[string:expectedPayload]"/>
    </munit:test>

    <munit:test name="testMpIsNotMocked" description="
    If the Message Processor is not mocked then do not change its behavior">

        <munit:set payload-ref="#[string:expectedPayload]"/>

        <flow-ref name="echoFlow"/>

        <munit:assert-that payloadIs-ref="#[string:expectedPayload]"/>
    </munit:test>

</mule>