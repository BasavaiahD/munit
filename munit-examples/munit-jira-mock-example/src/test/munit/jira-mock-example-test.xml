<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:mock="http://www.mulesoft.org/schema/mule/mock"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
    http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
            http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
            http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">

    <munit:config/>
    <mock:config/>

    <spring:beans>
        <spring:import resource="classpath:jira-mock-example.xml"/>
    </spring:beans>


    <script:script name="mockTaskList" engine="groovy"><![CDATA[
            import org.mule.module.google.task.model.TaskList;
            
            List<TaskList> lists = new ArrayList<TaskList>();
            TaskList task1 = new TaskList();
            task1.setTitle("task1");
            lists.add(task1);

            TaskList task2 = new TaskList();
            task2.setTitle("task2");
            lists.add(task2);

			return lists;
		]]>
    </script:script>

    <munit:test name="whenJiraIsCorrectLogMessage"
                description="If Jira Does not fail then we log the message Everything OK">


        <mock:when messageProcessor="jira:create-issue">
            <mock:then-return payload-ref="#[string:OK]"/>
        </mock:when>

        <munit:set
                payload-ref="#[resultOfScript('mockTaskList')]"/>

        <flow-ref name="jira-mock-exampleFlow"/>

        <mock:verify-call messageProcessor="jira:create-issue" atLeast="1">
            <mock:attributes>
                <mock:attribute name="summary" whereValue-ref="#[string:task2]"/>
            </mock:attributes>
        </mock:verify-call>

        <mock:verify-call messageProcessor="jira:create-issue" atLeast="1">
            <mock:attributes>
                <mock:attribute name="summary" whereValue-ref="#[string:task2]"/>
            </mock:attributes>
        </mock:verify-call>

        <mock:verify-call messageProcessor="logger" atLeast="1">
            <mock:attributes>
                <mock:attribute name="message" whereValue-ref="#[string:Everything OK]"/>
            </mock:attributes>
        </mock:verify-call>

    </munit:test>

    <munit:test name="whenJiraFailsLogMessage"
                description="If Jira Does not fail then we log the message JIRA FAILED">


        <mock:when messageProcessor="jira:create-issue">
            <mock:then-return payload-ref="#[string:FAILED]"/>
        </mock:when>

        <munit:set
                payload-ref="#[resultOfScript('mockTaskList')]"/>

        <flow-ref name="jira-mock-exampleFlow"/>

        <mock:verify-call messageProcessor="jira:create-issue" atLeast="1">
            <mock:attributes>
                <mock:attribute name="summary" whereValue-ref="#[string:task2]"/>
            </mock:attributes>
        </mock:verify-call>

        <mock:verify-call messageProcessor="jira:create-issue" atLeast="1">
            <mock:attributes>
                <mock:attribute name="summary" whereValue-ref="#[string:task2]"/>
            </mock:attributes>
        </mock:verify-call>

        <mock:verify-call messageProcessor="logger" atLeast="1">
            <mock:attributes>
                <mock:attribute name="message" whereValue-ref="#[string:JIRA FAILED]"/>
            </mock:attributes>
        </mock:verify-call>

    </munit:test>
</mule>